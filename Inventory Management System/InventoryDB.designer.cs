#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Inventory_Management_System
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Inventory")]
	public partial class InventoryDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAdminTable(AdminTable instance);
    partial void UpdateAdminTable(AdminTable instance);
    partial void DeleteAdminTable(AdminTable instance);
    partial void InsertCatagoryTable(CatagoryTable instance);
    partial void UpdateCatagoryTable(CatagoryTable instance);
    partial void DeleteCatagoryTable(CatagoryTable instance);
    partial void InsertProductTable(ProductTable instance);
    partial void UpdateProductTable(ProductTable instance);
    partial void DeleteProductTable(ProductTable instance);
    partial void InsertCustomerTable(CustomerTable instance);
    partial void UpdateCustomerTable(CustomerTable instance);
    partial void DeleteCustomerTable(CustomerTable instance);
    partial void InsertOrderTable(OrderTable instance);
    partial void UpdateOrderTable(OrderTable instance);
    partial void DeleteOrderTable(OrderTable instance);
    #endregion
		
		public InventoryDBDataContext() : 
				base(global::Inventory_Management_System.Properties.Settings.Default.InventoryConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public InventoryDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public InventoryDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public InventoryDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public InventoryDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AdminTable> AdminTables
		{
			get
			{
				return this.GetTable<AdminTable>();
			}
		}
		
		public System.Data.Linq.Table<CatagoryTable> CatagoryTables
		{
			get
			{
				return this.GetTable<CatagoryTable>();
			}
		}
		
		public System.Data.Linq.Table<ProductTable> ProductTables
		{
			get
			{
				return this.GetTable<ProductTable>();
			}
		}
		
		public System.Data.Linq.Table<CustomerTable> CustomerTables
		{
			get
			{
				return this.GetTable<CustomerTable>();
			}
		}
		
		public System.Data.Linq.Table<OrderTable> OrderTables
		{
			get
			{
				return this.GetTable<OrderTable>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AdminTable")]
	public partial class AdminTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Username;
		
		private string _Password;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public AdminTable()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CatagoryTable")]
	public partial class CatagoryTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Catagory_ID;
		
		private string _Catagory_Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCatagory_IDChanging(int value);
    partial void OnCatagory_IDChanged();
    partial void OnCatagory_NameChanging(string value);
    partial void OnCatagory_NameChanged();
    #endregion
		
		public CatagoryTable()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Catagory_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Catagory_ID
		{
			get
			{
				return this._Catagory_ID;
			}
			set
			{
				if ((this._Catagory_ID != value))
				{
					this.OnCatagory_IDChanging(value);
					this.SendPropertyChanging();
					this._Catagory_ID = value;
					this.SendPropertyChanged("Catagory_ID");
					this.OnCatagory_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Catagory_Name", DbType="NVarChar(50)")]
		public string Catagory_Name
		{
			get
			{
				return this._Catagory_Name;
			}
			set
			{
				if ((this._Catagory_Name != value))
				{
					this.OnCatagory_NameChanging(value);
					this.SendPropertyChanging();
					this._Catagory_Name = value;
					this.SendPropertyChanged("Catagory_Name");
					this.OnCatagory_NameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductTable")]
	public partial class ProductTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Product_ID;
		
		private string _Product_Name;
		
		private System.Nullable<int> _Product_Quantity;
		
		private System.Nullable<double> _Price;
		
		private string _Description;
		
		private string _Catagory_Name;
		
		private EntitySet<OrderTable> _OrderTables;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProduct_IDChanging(int value);
    partial void OnProduct_IDChanged();
    partial void OnProduct_NameChanging(string value);
    partial void OnProduct_NameChanged();
    partial void OnProduct_QuantityChanging(System.Nullable<int> value);
    partial void OnProduct_QuantityChanged();
    partial void OnPriceChanging(System.Nullable<double> value);
    partial void OnPriceChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCatagory_NameChanging(string value);
    partial void OnCatagory_NameChanged();
    #endregion
		
		public ProductTable()
		{
			this._OrderTables = new EntitySet<OrderTable>(new Action<OrderTable>(this.attach_OrderTables), new Action<OrderTable>(this.detach_OrderTables));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Product_ID
		{
			get
			{
				return this._Product_ID;
			}
			set
			{
				if ((this._Product_ID != value))
				{
					this.OnProduct_IDChanging(value);
					this.SendPropertyChanging();
					this._Product_ID = value;
					this.SendPropertyChanged("Product_ID");
					this.OnProduct_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product_Name", DbType="NVarChar(50)")]
		public string Product_Name
		{
			get
			{
				return this._Product_Name;
			}
			set
			{
				if ((this._Product_Name != value))
				{
					this.OnProduct_NameChanging(value);
					this.SendPropertyChanging();
					this._Product_Name = value;
					this.SendPropertyChanged("Product_Name");
					this.OnProduct_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product_Quantity", DbType="Int")]
		public System.Nullable<int> Product_Quantity
		{
			get
			{
				return this._Product_Quantity;
			}
			set
			{
				if ((this._Product_Quantity != value))
				{
					this.OnProduct_QuantityChanging(value);
					this.SendPropertyChanging();
					this._Product_Quantity = value;
					this.SendPropertyChanged("Product_Quantity");
					this.OnProduct_QuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Float")]
		public System.Nullable<double> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Catagory_Name", DbType="NVarChar(50)")]
		public string Catagory_Name
		{
			get
			{
				return this._Catagory_Name;
			}
			set
			{
				if ((this._Catagory_Name != value))
				{
					this.OnCatagory_NameChanging(value);
					this.SendPropertyChanging();
					this._Catagory_Name = value;
					this.SendPropertyChanged("Catagory_Name");
					this.OnCatagory_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductTable_OrderTable", Storage="_OrderTables", ThisKey="Product_ID", OtherKey="Product_ID")]
		public EntitySet<OrderTable> OrderTables
		{
			get
			{
				return this._OrderTables;
			}
			set
			{
				this._OrderTables.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderTables(OrderTable entity)
		{
			this.SendPropertyChanging();
			entity.ProductTable = this;
		}
		
		private void detach_OrderTables(OrderTable entity)
		{
			this.SendPropertyChanging();
			entity.ProductTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CustomerTable")]
	public partial class CustomerTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Customer_ID;
		
		private string _First_Name;
		
		private string _Last_Name;
		
		private string _Phone;
		
		private string _Email;
		
		private EntitySet<OrderTable> _OrderTables;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomer_IDChanging(int value);
    partial void OnCustomer_IDChanged();
    partial void OnFirst_NameChanging(string value);
    partial void OnFirst_NameChanged();
    partial void OnLast_NameChanging(string value);
    partial void OnLast_NameChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public CustomerTable()
		{
			this._OrderTables = new EntitySet<OrderTable>(new Action<OrderTable>(this.attach_OrderTables), new Action<OrderTable>(this.detach_OrderTables));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Customer_ID
		{
			get
			{
				return this._Customer_ID;
			}
			set
			{
				if ((this._Customer_ID != value))
				{
					this.OnCustomer_IDChanging(value);
					this.SendPropertyChanging();
					this._Customer_ID = value;
					this.SendPropertyChanged("Customer_ID");
					this.OnCustomer_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_First_Name", DbType="NVarChar(50)")]
		public string First_Name
		{
			get
			{
				return this._First_Name;
			}
			set
			{
				if ((this._First_Name != value))
				{
					this.OnFirst_NameChanging(value);
					this.SendPropertyChanging();
					this._First_Name = value;
					this.SendPropertyChanged("First_Name");
					this.OnFirst_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Last_Name", DbType="NVarChar(50)")]
		public string Last_Name
		{
			get
			{
				return this._Last_Name;
			}
			set
			{
				if ((this._Last_Name != value))
				{
					this.OnLast_NameChanging(value);
					this.SendPropertyChanging();
					this._Last_Name = value;
					this.SendPropertyChanged("Last_Name");
					this.OnLast_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(50)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerTable_OrderTable", Storage="_OrderTables", ThisKey="Customer_ID", OtherKey="Customer_ID")]
		public EntitySet<OrderTable> OrderTables
		{
			get
			{
				return this._OrderTables;
			}
			set
			{
				this._OrderTables.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderTables(OrderTable entity)
		{
			this.SendPropertyChanging();
			entity.CustomerTable = this;
		}
		
		private void detach_OrderTables(OrderTable entity)
		{
			this.SendPropertyChanging();
			entity.CustomerTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderTable")]
	public partial class OrderTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Order_ID;
		
		private int _Customer_ID;
		
		private string _Catagory;
		
		private int _Product_ID;
		
		private int _Order_Quantity;
		
		private string _Order_date;
		
		private System.Nullable<double> _Bill;
		
		private EntityRef<CustomerTable> _CustomerTable;
		
		private EntityRef<ProductTable> _ProductTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrder_IDChanging(int value);
    partial void OnOrder_IDChanged();
    partial void OnCustomer_IDChanging(int value);
    partial void OnCustomer_IDChanged();
    partial void OnCatagoryChanging(string value);
    partial void OnCatagoryChanged();
    partial void OnProduct_IDChanging(int value);
    partial void OnProduct_IDChanged();
    partial void OnOrder_QuantityChanging(int value);
    partial void OnOrder_QuantityChanged();
    partial void OnOrder_dateChanging(string value);
    partial void OnOrder_dateChanged();
    partial void OnBillChanging(System.Nullable<double> value);
    partial void OnBillChanged();
    #endregion
		
		public OrderTable()
		{
			this._CustomerTable = default(EntityRef<CustomerTable>);
			this._ProductTable = default(EntityRef<ProductTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Order_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Order_ID
		{
			get
			{
				return this._Order_ID;
			}
			set
			{
				if ((this._Order_ID != value))
				{
					this.OnOrder_IDChanging(value);
					this.SendPropertyChanging();
					this._Order_ID = value;
					this.SendPropertyChanged("Order_ID");
					this.OnOrder_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_ID", DbType="Int NOT NULL")]
		public int Customer_ID
		{
			get
			{
				return this._Customer_ID;
			}
			set
			{
				if ((this._Customer_ID != value))
				{
					if (this._CustomerTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomer_IDChanging(value);
					this.SendPropertyChanging();
					this._Customer_ID = value;
					this.SendPropertyChanged("Customer_ID");
					this.OnCustomer_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Catagory", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Catagory
		{
			get
			{
				return this._Catagory;
			}
			set
			{
				if ((this._Catagory != value))
				{
					this.OnCatagoryChanging(value);
					this.SendPropertyChanging();
					this._Catagory = value;
					this.SendPropertyChanged("Catagory");
					this.OnCatagoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product_ID", DbType="Int NOT NULL")]
		public int Product_ID
		{
			get
			{
				return this._Product_ID;
			}
			set
			{
				if ((this._Product_ID != value))
				{
					if (this._ProductTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProduct_IDChanging(value);
					this.SendPropertyChanging();
					this._Product_ID = value;
					this.SendPropertyChanged("Product_ID");
					this.OnProduct_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Order_Quantity", DbType="Int NOT NULL")]
		public int Order_Quantity
		{
			get
			{
				return this._Order_Quantity;
			}
			set
			{
				if ((this._Order_Quantity != value))
				{
					this.OnOrder_QuantityChanging(value);
					this.SendPropertyChanging();
					this._Order_Quantity = value;
					this.SendPropertyChanged("Order_Quantity");
					this.OnOrder_QuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Order_date", DbType="NVarChar(50)")]
		public string Order_date
		{
			get
			{
				return this._Order_date;
			}
			set
			{
				if ((this._Order_date != value))
				{
					this.OnOrder_dateChanging(value);
					this.SendPropertyChanging();
					this._Order_date = value;
					this.SendPropertyChanged("Order_date");
					this.OnOrder_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bill", DbType="Float")]
		public System.Nullable<double> Bill
		{
			get
			{
				return this._Bill;
			}
			set
			{
				if ((this._Bill != value))
				{
					this.OnBillChanging(value);
					this.SendPropertyChanging();
					this._Bill = value;
					this.SendPropertyChanged("Bill");
					this.OnBillChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerTable_OrderTable", Storage="_CustomerTable", ThisKey="Customer_ID", OtherKey="Customer_ID", IsForeignKey=true)]
		public CustomerTable CustomerTable
		{
			get
			{
				return this._CustomerTable.Entity;
			}
			set
			{
				CustomerTable previousValue = this._CustomerTable.Entity;
				if (((previousValue != value) 
							|| (this._CustomerTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CustomerTable.Entity = null;
						previousValue.OrderTables.Remove(this);
					}
					this._CustomerTable.Entity = value;
					if ((value != null))
					{
						value.OrderTables.Add(this);
						this._Customer_ID = value.Customer_ID;
					}
					else
					{
						this._Customer_ID = default(int);
					}
					this.SendPropertyChanged("CustomerTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductTable_OrderTable", Storage="_ProductTable", ThisKey="Product_ID", OtherKey="Product_ID", IsForeignKey=true)]
		public ProductTable ProductTable
		{
			get
			{
				return this._ProductTable.Entity;
			}
			set
			{
				ProductTable previousValue = this._ProductTable.Entity;
				if (((previousValue != value) 
							|| (this._ProductTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductTable.Entity = null;
						previousValue.OrderTables.Remove(this);
					}
					this._ProductTable.Entity = value;
					if ((value != null))
					{
						value.OrderTables.Add(this);
						this._Product_ID = value.Product_ID;
					}
					else
					{
						this._Product_ID = default(int);
					}
					this.SendPropertyChanged("ProductTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
